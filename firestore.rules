rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Function to check if the requesting user is a listed contributor to a product
    function isContributor(productId) {
      let contributions = get(/databases/$(database)/documents/products/$(productId)).data.contributions;
      return request.auth.uid in contributions.map(c => c.vendorId);
    }

    match /users/{userId} {
      // Anyone can read public user profiles (for supplier names, etc.)
      allow read: if isAuthenticated();
      // Users can create their own document during signup
      allow create: if isOwner(userId);
      // A user can only update their own document, and cannot change their role.
      // Suppliers' ratings are updated by the addReview function.
      allow update: if isOwner(userId) && request.resource.data.role == resource.data.role ||
                      (request.resource.data.keys().hasAll(['supplierRating']) && !isOwner(userId));

    }

    match /products/{productId} {
      // Allow reads for all authenticated users
      allow read: if isAuthenticated();
      // Allow creation for any authenticated user
      allow create: if isAuthenticated();
      // Only the supplier can update or delete their own product
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.supplierId;
    }

    match /products/{productId}/reviews/{reviewId} {
        // Anyone can read reviews
        allow read: if isAuthenticated();
        // Allow a user to create a review IFF they are a contributor to the parent product
        allow create: if isAuthenticated() && isContributor(productId);
    }
  }
}