
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isOwner(productId) {
      return request.auth.uid == get(/databases/$(database)/documents/products/$(productId)).data.supplierId;
    }

    function hasContributed(productId) {
      let contributions = get(/databases/$(database)/documents/products/$(productId)).data.contributions;
      return request.auth.uid in contributions.map(c => c.vendorId);
    }

    // Rules for Collections
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['supplierRating']));
    }

    match /products/{productId} {
      allow read: if true;
      allow create: if request.auth.uid != null;
      allow update: if isOwner(productId) || 
        (request.resource.data.contributions.size() == resource.data.contributions.size() + 1 &&
         request.resource.data.contributions[resource.data.contributions.size()].vendorId == request.auth.uid);
      allow delete: if isOwner(productId);

      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if hasContributed(productId);
      }
    }

    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      // Allow creation if the user is the supplier referenced in the notification
      allow create: if request.auth.uid == request.resource.data.supplierId;
    }
  }
}
