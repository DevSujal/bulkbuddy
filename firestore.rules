rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(doc) {
      return request.auth.uid == doc.data.supplierId;
    }

    function isNewContributor() {
      // The user is adding themselves to the contributions array.
      let newContributions = request.resource.data.contributions;
      let oldContributions = resource.data.contributions;
      // Ensure only one contribution is added
      if (newContributions.size() != oldContributions.size() + 1) {
        return false;
      }
      // The new contribution must belong to the user making the request.
      let addedContribution = newContributions[newContributions.size() - 1];
      return addedContribution.vendorId == request.auth.uid;
    }

    function isUpdatingContribution() {
      // Allow updates to currentQuantity and contributions array only
      return request.resource.data.keys().hasOnly(['currentQuantity', 'contributions']) && isNewContributor();
    }
    
    // Check if user is a contributor.
    function isContributor(productId) {
      let product = get(/databases/$(database)/documents/products/$(productId)).data;
      return request.auth.uid in product.contributions.map(c => c.vendorId);
    }
    
    // Check if the user is allowed to write a review.
    function canWriteReview(productId) {
        let product = get(/databases/$(database)/documents/products/$(productId)).data;
        return isContributor(productId) && (product.status == 'Fulfilled' || product.status == 'Shipped');
    }
    
    // USERS
    match /users/{userId} {
      allow read;
      allow create: if request.auth.uid == userId;
      // Allow user to update their own doc, or allow review logic to update supplier rating
      allow update: if request.auth.uid == userId || 
                    (getAfter(/databases/$(database)/documents/users/$(userId)).data.keys().hasOnly(['supplierRating']));
    }

    // PRODUCTS
    match /products/{productId} {
      allow read;
      allow create: if request.auth.uid != null;
      
      // Allow updates if user is the owner OR if they are a new contributor joining the order.
      allow update: if isOwner(getAfter(/databases/$(database)/documents/products/$(productId))) || isUpdatingContribution();

      allow delete: if isOwner(get(/databases/$(database)/documents/products/$(productId)));

      // REVIEWS Subcollection
      match /reviews/{reviewId} {
        allow read;
        // User must be a contributor to a fulfilled/shipped order to write a review.
        allow create: if canWriteReview(productId);
      }
    }
  }
}
