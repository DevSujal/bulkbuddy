rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(resource) {
      return request.auth.uid == resource.data.supplierId;
    }
    function isContributor(productId) {
      let contributions = get(/databases/$(database)/documents/products/$(productId)).data.contributions;
      // Correct syntax for filter: list.filter(variable, predicate)
      return contributions.filter(c, c.vendorId == request.auth.uid).size() > 0;
    }
    
    // Authenticated users can read/write their own user doc.
    // A user can also update a supplier's rating, but only the supplierRating field.
    match /users/{userId} {
      allow read;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['supplierRating']));
      allow delete: if false;
    }

    match /products/{productId} {
      allow read;
      allow create: if request.auth != null;
      // Allow updates if user is owner, OR if they are only updating contribution data
      allow update: if isOwner(resource) ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['contributions', 'currentQuantity', 'averageRating', 'reviewCount']));
      allow delete: if isOwner(resource);

      // Anyone can read reviews.
      // Only a verified contributor can create a review for that product.
      match /reviews/{reviewId} {
        allow read;
        allow create: if isContributor(productId) && request.resource.data.vendorId == request.auth.uid;
      }
    }

    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        // Allow notifications to be created only by the supplier of the product.
        // We get the product associated with the notification and check its supplierId.
        allow create: if get(/databases/$(database)/documents/products/$(request.resource.data.productId)).data.supplierId == request.auth.uid;
        allow delete: if false;
    }
  }
}
