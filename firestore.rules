rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(resource) {
      return request.auth.uid == resource.data.supplierId;
    }

    function canContribute(productId) {
      let product = get(/databases/$(database)/documents/products/$(productId)).data;
      return request.auth.uid in product.contributions.map(c => c.vendorId);
    }

    match /users/{userId} {
      allow read;
      // Allow user to create their own profile, or update it.
      // Allow a user to update another user's supplier rating ONLY if they are also adding a review.
      allow write: if request.auth.uid == userId ||
        (exists(/databases/$(database)/documents/products/$(request.resource.data.productId)/reviews/$(request.resource.data.reviewId))
         && request.resource.data.supplierRating.average > 0);
    }

    match /products/{productId} {
      allow read;
      // Allow creating a product if authenticated.
      allow create: if request.auth.uid != null;
      // Allow updating if the user is the owner (for status changes) OR
      // if the user is only adding their own contribution.
      allow update: if isOwner(resource) ||
                      (request.auth.uid != null &&
                       request.resource.data.currentQuantity == resource.data.currentQuantity + request.resource.data.contributions[resource.data.contributions.size() - 1].quantity &&
                       request.resource.data.contributions[resource.data.contributions.size() - 1].vendorId == request.auth.uid);

      // Allow deleting only if the user is the owner.
      allow delete: if isOwner(resource);

      match /reviews/{reviewId} {
        allow read;
        // Allow creating a review if the user has contributed to the product.
        allow create: if canContribute(productId);
      }
    }

    match /notifications/{notificationId} {
      // Allow read/update only for the user the notification is for.
      allow read, update: if request.auth.uid == resource.data.userId;
      // Allow creation by a supplier who is updating their own product status.
      // This is less secure as we can't directly verify the product ownership in the rule for a new doc.
      // A more secure way involves Cloud Functions, but for client-side logic, we trust the batch write.
      allow create: if request.auth.uid != null;
    }
  }
}
