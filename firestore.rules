
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user has contributed to a product
    function hasContributed(productId) {
      let productData = get(/databases/$(database)/documents/products/$(productId)).data;
      return request.auth.uid in productData.contributions.map(c => c.vendorId);
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      // Allow user to update their own profile, OR allow an update to a supplier's rating
      // if the incoming write only touches the supplierRating field.
      allow update: if isOwner(userId) || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['supplierRating']));
    }

    match /products/{productId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Allow update if user is the owner, OR if they are only adding their own contribution
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.supplierId) || 
                      (request.resource.data.contributions.size() == resource.data.contributions.size() + 1 &&
                       request.resource.data.contributions[-1].vendorId == request.auth.uid));

      allow delete: if isAuthenticated() && isOwner(resource.data.supplierId);
      
      match /reviews/{reviewId} {
        allow read: if true;
        // Allow creating a review if the user has contributed to the product
        allow create: if isAuthenticated() && hasContributed(productId);
      }
    }
    
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}
